name: Build & Deploy (Docker Hub → EC2)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: hiufungleung/healermy
      # Tag strategy: push "latest" and the commit SHA for rollback
      IMAGE_TAG: latest
      GIT_SHA: ${{ github.sha }}
      # CPU architecture to build for:
      # - linux/amd64 → x86_64 EC2 (t2/t3/m5/c5 etc.)
      # - linux/arm64 → Graviton EC2 (t4g/c7g/m7g etc.)
      PLATFORM: linux/amd64

    steps:
      # 1) Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Enable Buildx (multi-arch builds, better cache)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Login to Docker Hub (token must have Read & Write)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 4) Build & push image to Docker Hub
      - name: Build & Push image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.PLATFORM }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ env.GIT_SHA }}

      # 5) SSH into EC2, pull & run the container on port 3000
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e

            CONTAINER=comp3820
            PORT=3000
            IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            
            # login to Docker Hub
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop/remove old container if present
            docker rm -f "$CONTAINER" 2>/dev/null || true

            # Pull the latest image
            docker pull "$IMAGE"

            # Run the container (Next.js needs HOSTNAME=0.0.0.0 in your setup)
            docker run -d --name "$CONTAINER" \
              -e HOSTNAME=0.0.0.0 \
              -e PORT=$PORT \
              --restart unless-stopped \
              -p $PORT:$PORT \
              "$IMAGE"

            # Simple health check from EC2
            sleep 5
            curl -fsS "http://localhost:$PORT/" >/dev/null && echo "UP"