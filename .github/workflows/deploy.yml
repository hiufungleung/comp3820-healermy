name: Build Docker Image & Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Shared environment variables
env:
  IMAGE_NAME: hiufungleung/healermy
  IMAGE_TAG: latest

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      digest:     ${{ steps.build.outputs.digest }}     # multi-arch manifest digest
      image_ref:  ${{ steps.meta.outputs.image_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Multiple architecture build requires QEMU and Buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Compose image ref
        id: meta
        run: echo "image_ref=${IMAGE_NAME}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

      # Build and push the Docker image for multiple architectures
      - name: Build & Push (multi-arch) to Docker Hub
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          # Push the image with a tag and digest
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            CONTAINER=healermy
            PORT=3000

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            IMAGE_TAG="${{ env.IMAGE_TAG }}"
            DIGEST="${{ needs.build.outputs.digest }}"  # multi-arch manifest digest
            IMAGE_BY_DIGEST="${IMAGE_NAME}@${DIGEST}"
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Ensure the web network exists
            docker network inspect web >/dev/null 2>&1 || docker network create web

            # Remove existing container if it exists
            docker rm -f "$CONTAINER" 2>/dev/null || true

            # Pull the image by digest
            docker pull "$IMAGE_BY_DIGEST"

            # Run the container
            docker run -d --name "$CONTAINER" \
              --network web \
              -e HOSTNAME=0.0.0.0 \
              -e PORT=$PORT \
              --restart unless-stopped \
              -p $PORT:$PORT \
              "$IMAGE_BY_DIGEST"

            # Health check
            sleep 5
            curl -fsS "http://localhost:$PORT/" >/dev/null && echo "UP"
