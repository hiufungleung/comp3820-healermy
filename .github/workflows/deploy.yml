name: Build & Deploy (Multi-Arch • Cached • Parallel)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: hiufungleung/healermy
  IMAGE_TAG: latest

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Build each arch in parallel with GHA cache
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # QEMU only needed when host ≠ target arch (safe to enable always)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # GHA cache for Buildx layers (per-arch caches maintained by Buildx)
      - name: Build & Push (${{ matrix.arch }}) with cache
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          # Two per-arch tags: immutable commit tag, and rolling arch tag
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stitch both arches into multi-arch manifests (latest & commit SHA)
  manifest:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      digest: ${{ steps.out.outputs.digest }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create & Push multi-arch manifests
        run: |
          set -eux
          IMAGE="${{ env.IMAGE_NAME }}"
          SHA="${{ github.sha }}"

          # Create commit-specific manifest (immutable)
          docker manifest create "${IMAGE}:${SHA}" \
            --amend "${IMAGE}:${SHA}-amd64" \
            --amend "${IMAGE}:${SHA}-arm64"
          docker manifest push "${IMAGE}:${SHA}"

          # Create/refresh 'latest' manifest (rolls forward)
          docker manifest create "${IMAGE}:${{ env.IMAGE_TAG }}" \
            --amend "${IMAGE}:${SHA}-amd64" \
            --amend "${IMAGE}:${SHA}-arm64"
          docker manifest push "${IMAGE}:${{ env.IMAGE_TAG }}"

      - name: Output manifest digest (commit tag)
        id: out
        run: |
          set -e
          IMAGE="${{ env.IMAGE_NAME }}"
          SHA="${{ github.sha }}"
          DIGEST="$(docker buildx imagetools inspect "${IMAGE}:${SHA}" --format '{{json .Manifest.Digest}}' | tr -d '"')"
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: manifest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            CONTAINER=healermy
            PORT=3000

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            RAW_DIGEST="${{ needs.manifest.outputs.digest }}"
            DIGEST="$(printf '%s' "$RAW_DIGEST" | tr -d '\r\n')"

            # Prefer immutable digest; fallback to commit SHA tag if missing
            if [ -n "$DIGEST" ]; then
              IMAGE_REF="${IMAGE_NAME}@${DIGEST}"
            else
              IMAGE_REF="${IMAGE_NAME}:${{ github.sha }}"
            fi
            echo "Using image: $IMAGE_REF"

            # Login on EC2 (needed if repo is private)
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Ensure the app network exists
            docker network inspect web >/dev/null 2>&1 || docker network create web

            # Replace old container
            docker rm -f "$CONTAINER" 2>/dev/null || true
            docker pull "$IMAGE_REF"

            docker run -d --name "$CONTAINER" \
              --network web \
              -e HOSTNAME=0.0.0.0 \
              -e PORT=$PORT \
              --restart unless-stopped \
              "$IMAGE_REF"

            # Simple health check
            sleep 5
            curl -fsS "http://localhost:$PORT/" >/dev/null && echo "UP"